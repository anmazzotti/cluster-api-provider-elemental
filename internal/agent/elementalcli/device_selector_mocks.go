// /*
// Copyright Â© 2022 - 2023 SUSE LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// */
//

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rancher-sandbox/cluster-api-provider-elemental/internal/agent/elementalcli (interfaces: DeviceSelectorHandler)
//
// Generated by this command:
//
//	mockgen -copyright_file=hack/boilerplate.go.txt -destination=internal/agent/elementalcli/device_selector_mocks.go -package=elementalcli github.com/rancher-sandbox/cluster-api-provider-elemental/internal/agent/elementalcli DeviceSelectorHandler
//
// Package elementalcli is a generated GoMock package.
package elementalcli

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockDeviceSelectorHandler is a mock of DeviceSelectorHandler interface.
type MockDeviceSelectorHandler struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceSelectorHandlerMockRecorder
}

// MockDeviceSelectorHandlerMockRecorder is the mock recorder for MockDeviceSelectorHandler.
type MockDeviceSelectorHandlerMockRecorder struct {
	mock *MockDeviceSelectorHandler
}

// NewMockDeviceSelectorHandler creates a new mock instance.
func NewMockDeviceSelectorHandler(ctrl *gomock.Controller) *MockDeviceSelectorHandler {
	mock := &MockDeviceSelectorHandler{ctrl: ctrl}
	mock.recorder = &MockDeviceSelectorHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeviceSelectorHandler) EXPECT() *MockDeviceSelectorHandlerMockRecorder {
	return m.recorder
}

// FindInstallationDevice mocks base method.
func (m *MockDeviceSelectorHandler) FindInstallationDevice(arg0 DeviceSelector) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindInstallationDevice", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindInstallationDevice indicates an expected call of FindInstallationDevice.
func (mr *MockDeviceSelectorHandlerMockRecorder) FindInstallationDevice(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindInstallationDevice", reflect.TypeOf((*MockDeviceSelectorHandler)(nil).FindInstallationDevice), arg0)
}
