// /*
// Copyright Â© 2022 - 2023 SUSE LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// */
//

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rancher-sandbox/cluster-api-provider-elemental/internal/agent/phase (interfaces: HostPhaseHandler)
//
// Generated by this command:
//
//	mockgen -copyright_file=hack/boilerplate.go.txt -destination=internal/agent/phase/handler_mocks.go -package=phase github.com/rancher-sandbox/cluster-api-provider-elemental/internal/agent/phase HostPhaseHandler
//
// Package phase is a generated GoMock package.
package phase

import (
	reflect "reflect"

	v1beta1 "github.com/rancher-sandbox/cluster-api-provider-elemental/api/v1beta1"
	client "github.com/rancher-sandbox/cluster-api-provider-elemental/internal/agent/client"
	phases "github.com/rancher-sandbox/cluster-api-provider-elemental/internal/agent/phase/phases"
	identity "github.com/rancher-sandbox/cluster-api-provider-elemental/internal/identity"
	osplugin "github.com/rancher-sandbox/cluster-api-provider-elemental/pkg/agent/osplugin"
	vfs "github.com/twpayne/go-vfs/v4"
	gomock "go.uber.org/mock/gomock"
)

// MockHostPhaseHandler is a mock of HostPhaseHandler interface.
type MockHostPhaseHandler struct {
	ctrl     *gomock.Controller
	recorder *MockHostPhaseHandlerMockRecorder
}

// MockHostPhaseHandlerMockRecorder is the mock recorder for MockHostPhaseHandler.
type MockHostPhaseHandlerMockRecorder struct {
	mock *MockHostPhaseHandler
}

// NewMockHostPhaseHandler creates a new mock instance.
func NewMockHostPhaseHandler(ctrl *gomock.Controller) *MockHostPhaseHandler {
	mock := &MockHostPhaseHandler{ctrl: ctrl}
	mock.recorder = &MockHostPhaseHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHostPhaseHandler) EXPECT() *MockHostPhaseHandlerMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m *MockHostPhaseHandler) Handle(arg0 v1beta1.HostPhase) (phases.PostAction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", arg0)
	ret0, _ := ret[0].(phases.PostAction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Handle indicates an expected call of Handle.
func (mr *MockHostPhaseHandlerMockRecorder) Handle(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockHostPhaseHandler)(nil).Handle), arg0)
}

// Init mocks base method.
func (m *MockHostPhaseHandler) Init(arg0 vfs.FS, arg1 client.Client, arg2 osplugin.Plugin, arg3 identity.Identity, arg4 HostContext) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Init", arg0, arg1, arg2, arg3, arg4)
}

// Init indicates an expected call of Init.
func (mr *MockHostPhaseHandlerMockRecorder) Init(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockHostPhaseHandler)(nil).Init), arg0, arg1, arg2, arg3, arg4)
}
