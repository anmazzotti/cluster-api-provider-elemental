// /*
// Copyright Â© 2022 - 2023 SUSE LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// */
//

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rancher-sandbox/cluster-api-provider-elemental/internal/agent/phase/phases (interfaces: RegistrationHandler,InstallHandler,BootstrapHandler,ResetHandler)
//
// Generated by this command:
//
//	mockgen -copyright_file=hack/boilerplate.go.txt -destination=internal/agent/phase/phases/phases_mocks.go -package=phases github.com/rancher-sandbox/cluster-api-provider-elemental/internal/agent/phase/phases RegistrationHandler,InstallHandler,BootstrapHandler,ResetHandler
//
// Package phases is a generated GoMock package.
package phases

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRegistrationHandler is a mock of RegistrationHandler interface.
type MockRegistrationHandler struct {
	ctrl     *gomock.Controller
	recorder *MockRegistrationHandlerMockRecorder
}

// MockRegistrationHandlerMockRecorder is the mock recorder for MockRegistrationHandler.
type MockRegistrationHandlerMockRecorder struct {
	mock *MockRegistrationHandler
}

// NewMockRegistrationHandler creates a new mock instance.
func NewMockRegistrationHandler(ctrl *gomock.Controller) *MockRegistrationHandler {
	mock := &MockRegistrationHandler{ctrl: ctrl}
	mock.recorder = &MockRegistrationHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegistrationHandler) EXPECT() *MockRegistrationHandlerMockRecorder {
	return m.recorder
}

// FinalizeRegistration mocks base method.
func (m *MockRegistrationHandler) FinalizeRegistration(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeRegistration", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeRegistration indicates an expected call of FinalizeRegistration.
func (mr *MockRegistrationHandlerMockRecorder) FinalizeRegistration(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeRegistration", reflect.TypeOf((*MockRegistrationHandler)(nil).FinalizeRegistration), arg0, arg1)
}

// Register mocks base method.
func (m *MockRegistrationHandler) Register() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockRegistrationHandlerMockRecorder) Register() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockRegistrationHandler)(nil).Register))
}

// MockInstallHandler is a mock of InstallHandler interface.
type MockInstallHandler struct {
	ctrl     *gomock.Controller
	recorder *MockInstallHandlerMockRecorder
}

// MockInstallHandlerMockRecorder is the mock recorder for MockInstallHandler.
type MockInstallHandlerMockRecorder struct {
	mock *MockInstallHandler
}

// NewMockInstallHandler creates a new mock instance.
func NewMockInstallHandler(ctrl *gomock.Controller) *MockInstallHandler {
	mock := &MockInstallHandler{ctrl: ctrl}
	mock.recorder = &MockInstallHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInstallHandler) EXPECT() *MockInstallHandlerMockRecorder {
	return m.recorder
}

// Install mocks base method.
func (m *MockInstallHandler) Install(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Install", arg0)
}

// Install indicates an expected call of Install.
func (mr *MockInstallHandlerMockRecorder) Install(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Install", reflect.TypeOf((*MockInstallHandler)(nil).Install), arg0)
}

// MockBootstrapHandler is a mock of BootstrapHandler interface.
type MockBootstrapHandler struct {
	ctrl     *gomock.Controller
	recorder *MockBootstrapHandlerMockRecorder
}

// MockBootstrapHandlerMockRecorder is the mock recorder for MockBootstrapHandler.
type MockBootstrapHandlerMockRecorder struct {
	mock *MockBootstrapHandler
}

// NewMockBootstrapHandler creates a new mock instance.
func NewMockBootstrapHandler(ctrl *gomock.Controller) *MockBootstrapHandler {
	mock := &MockBootstrapHandler{ctrl: ctrl}
	mock.recorder = &MockBootstrapHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBootstrapHandler) EXPECT() *MockBootstrapHandlerMockRecorder {
	return m.recorder
}

// Bootstrap mocks base method.
func (m *MockBootstrapHandler) Bootstrap(arg0 string) (PostCondition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bootstrap", arg0)
	ret0, _ := ret[0].(PostCondition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Bootstrap indicates an expected call of Bootstrap.
func (mr *MockBootstrapHandlerMockRecorder) Bootstrap(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bootstrap", reflect.TypeOf((*MockBootstrapHandler)(nil).Bootstrap), arg0)
}

// MockResetHandler is a mock of ResetHandler interface.
type MockResetHandler struct {
	ctrl     *gomock.Controller
	recorder *MockResetHandlerMockRecorder
}

// MockResetHandlerMockRecorder is the mock recorder for MockResetHandler.
type MockResetHandlerMockRecorder struct {
	mock *MockResetHandler
}

// NewMockResetHandler creates a new mock instance.
func NewMockResetHandler(ctrl *gomock.Controller) *MockResetHandler {
	mock := &MockResetHandler{ctrl: ctrl}
	mock.recorder = &MockResetHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResetHandler) EXPECT() *MockResetHandlerMockRecorder {
	return m.recorder
}

// Reset mocks base method.
func (m *MockResetHandler) Reset(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Reset", arg0)
}

// Reset indicates an expected call of Reset.
func (mr *MockResetHandlerMockRecorder) Reset(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockResetHandler)(nil).Reset), arg0)
}

// TriggerReset mocks base method.
func (m *MockResetHandler) TriggerReset(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TriggerReset", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// TriggerReset indicates an expected call of TriggerReset.
func (mr *MockResetHandlerMockRecorder) TriggerReset(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TriggerReset", reflect.TypeOf((*MockResetHandler)(nil).TriggerReset), arg0)
}
