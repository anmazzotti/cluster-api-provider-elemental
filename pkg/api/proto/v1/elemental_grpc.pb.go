// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: pkg/api/proto/v1/elemental.proto

package elemental

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Elemental_GetRegistration_FullMethodName = "/Elemental/GetRegistration"
	Elemental_CreateHost_FullMethodName      = "/Elemental/CreateHost"
	Elemental_DeleteHost_FullMethodName      = "/Elemental/DeleteHost"
	Elemental_GetBootstrap_FullMethodName    = "/Elemental/GetBootstrap"
	Elemental_ReconcileHost_FullMethodName   = "/Elemental/ReconcileHost"
)

// ElementalClient is the client API for Elemental service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ElementalClient interface {
	GetRegistration(ctx context.Context, in *RegistrationRequest, opts ...grpc.CallOption) (*RegistrationResponse, error)
	CreateHost(ctx context.Context, in *HostCreateRequest, opts ...grpc.CallOption) (*HostResponse, error)
	DeleteHost(ctx context.Context, in *HostDeleteRequest, opts ...grpc.CallOption) (*HostDeleteResponse, error)
	GetBootstrap(ctx context.Context, in *BootstrapRequest, opts ...grpc.CallOption) (*BootstrapResponse, error)
	ReconcileHost(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[HostPatchRequest, HostResponse], error)
}

type elementalClient struct {
	cc grpc.ClientConnInterface
}

func NewElementalClient(cc grpc.ClientConnInterface) ElementalClient {
	return &elementalClient{cc}
}

func (c *elementalClient) GetRegistration(ctx context.Context, in *RegistrationRequest, opts ...grpc.CallOption) (*RegistrationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegistrationResponse)
	err := c.cc.Invoke(ctx, Elemental_GetRegistration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *elementalClient) CreateHost(ctx context.Context, in *HostCreateRequest, opts ...grpc.CallOption) (*HostResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HostResponse)
	err := c.cc.Invoke(ctx, Elemental_CreateHost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *elementalClient) DeleteHost(ctx context.Context, in *HostDeleteRequest, opts ...grpc.CallOption) (*HostDeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HostDeleteResponse)
	err := c.cc.Invoke(ctx, Elemental_DeleteHost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *elementalClient) GetBootstrap(ctx context.Context, in *BootstrapRequest, opts ...grpc.CallOption) (*BootstrapResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BootstrapResponse)
	err := c.cc.Invoke(ctx, Elemental_GetBootstrap_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *elementalClient) ReconcileHost(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[HostPatchRequest, HostResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Elemental_ServiceDesc.Streams[0], Elemental_ReconcileHost_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[HostPatchRequest, HostResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Elemental_ReconcileHostClient = grpc.BidiStreamingClient[HostPatchRequest, HostResponse]

// ElementalServer is the server API for Elemental service.
// All implementations must embed UnimplementedElementalServer
// for forward compatibility.
type ElementalServer interface {
	GetRegistration(context.Context, *RegistrationRequest) (*RegistrationResponse, error)
	CreateHost(context.Context, *HostCreateRequest) (*HostResponse, error)
	DeleteHost(context.Context, *HostDeleteRequest) (*HostDeleteResponse, error)
	GetBootstrap(context.Context, *BootstrapRequest) (*BootstrapResponse, error)
	ReconcileHost(grpc.BidiStreamingServer[HostPatchRequest, HostResponse]) error
	mustEmbedUnimplementedElementalServer()
}

// UnimplementedElementalServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedElementalServer struct{}

func (UnimplementedElementalServer) GetRegistration(context.Context, *RegistrationRequest) (*RegistrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRegistration not implemented")
}
func (UnimplementedElementalServer) CreateHost(context.Context, *HostCreateRequest) (*HostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHost not implemented")
}
func (UnimplementedElementalServer) DeleteHost(context.Context, *HostDeleteRequest) (*HostDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHost not implemented")
}
func (UnimplementedElementalServer) GetBootstrap(context.Context, *BootstrapRequest) (*BootstrapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBootstrap not implemented")
}
func (UnimplementedElementalServer) ReconcileHost(grpc.BidiStreamingServer[HostPatchRequest, HostResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ReconcileHost not implemented")
}
func (UnimplementedElementalServer) mustEmbedUnimplementedElementalServer() {}
func (UnimplementedElementalServer) testEmbeddedByValue()                   {}

// UnsafeElementalServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ElementalServer will
// result in compilation errors.
type UnsafeElementalServer interface {
	mustEmbedUnimplementedElementalServer()
}

func RegisterElementalServer(s grpc.ServiceRegistrar, srv ElementalServer) {
	// If the following call pancis, it indicates UnimplementedElementalServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Elemental_ServiceDesc, srv)
}

func _Elemental_GetRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElementalServer).GetRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Elemental_GetRegistration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ElementalServer).GetRegistration(ctx, req.(*RegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Elemental_CreateHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElementalServer).CreateHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Elemental_CreateHost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ElementalServer).CreateHost(ctx, req.(*HostCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Elemental_DeleteHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElementalServer).DeleteHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Elemental_DeleteHost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ElementalServer).DeleteHost(ctx, req.(*HostDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Elemental_GetBootstrap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BootstrapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElementalServer).GetBootstrap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Elemental_GetBootstrap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ElementalServer).GetBootstrap(ctx, req.(*BootstrapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Elemental_ReconcileHost_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ElementalServer).ReconcileHost(&grpc.GenericServerStream[HostPatchRequest, HostResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Elemental_ReconcileHostServer = grpc.BidiStreamingServer[HostPatchRequest, HostResponse]

// Elemental_ServiceDesc is the grpc.ServiceDesc for Elemental service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Elemental_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Elemental",
	HandlerType: (*ElementalServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRegistration",
			Handler:    _Elemental_GetRegistration_Handler,
		},
		{
			MethodName: "CreateHost",
			Handler:    _Elemental_CreateHost_Handler,
		},
		{
			MethodName: "DeleteHost",
			Handler:    _Elemental_DeleteHost_Handler,
		},
		{
			MethodName: "GetBootstrap",
			Handler:    _Elemental_GetBootstrap_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReconcileHost",
			Handler:       _Elemental_ReconcileHost_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pkg/api/proto/v1/elemental.proto",
}
